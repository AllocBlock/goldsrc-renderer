#pragma once
#include "Pointer.h"
#include "IOImage.h"
#include "Scene.h"

#include <glm/glm.hpp>
#include <fstream>
#include <vector>
#include <set>
#include <filesystem>

struct SObjObject
{
    std::string Name;
    ptr<IDataArray<glm::vec3>> pVertexArray;
    ptr<IDataArray<glm::vec2>> pTexCoordArray;
    ptr<CIOImage> pImage;
};

/* e.g.
.obj:

mtllib MY_MODEL.mtl

g GROUP_1
usemtl TEST_1
v -0.50000000 -0.50000000 -0.50000000
v -0.50000000 -0.50000000 0.50000000
v -0.50000000 0.50000000 -0.50000000
v -0.50000000 0.50000000 0.50000000
v 0.50000000 -0.50000000 -0.50000000
v 0.50000000 -0.50000000 0.50000000
v 0.50000000 0.50000000 -0.50000000
v 0.50000000 0.50000000 0.50000000
vt 0.000000 0.000000
vt 1.000000 0.000000
vt 0.000000 1.000000
vt 1.000000 1.000000
f 1/1 3/2 7/4 5/3
f 3/1 4/2 8/4 7/3
f 5/1 7/2 8/4 6/3


g GROUP_2
usemtl TEST_2
v -0.50000000 -0.50000000 -0.50000000
v -0.50000000 -0.50000000 0.50000000
v -0.50000000 0.50000000 -0.50000000
vt 0.000000 0.000000
vt 1.000000 0.000000
vt 0.000000 1.000000
f 9/5 10/6 11/7
.mtl

newmtl MY_MTL_1
Ka 1 1 1
Kd 1 1 1
d 1
Ns 0
illum 1
map_Kd TEST_1.jpg

newmtl MY_MTL_2
Ka 1 1 1
Kd 1 1 1
d 1
Ns 0
illum 1
map_Kd TEST_2.jpg
*/

class CSceneObjWriter
{
public:
    void addScene(SScene::Ptr vScene)
    {
        for (auto pObject : vScene->Objects)
        {
            uint32_t TexIndex = pObject->getTexIndexArray()->get(0);
            auto pImage = vScene->TexImageSet[TexIndex];

            ptr<SObjObject> pObjObject = make<SObjObject>();
            pObjObject->Name = pObject->getName();
            pObjObject->pVertexArray = pObject->getVertexArray();
            pObjObject->pTexCoordArray = pObject->getTexCoordArray();
            pObjObject->pImage = pImage;

            addObject(pObjObject);
        }
    }

    void addObject(ptr<SObjObject> vObject)
    {
        m_ObjectSet.emplace_back(vObject);
    }

    void writeToFile(std::filesystem::path vFilePath)
    {
        std::set<ptr<CIOImage>> ImageSet;
        uint64_t CurId = 1;

        std::filesystem::path MtlFileName = vFilePath.filename().replace_extension(".mtl");

        std::ofstream ObjFile(vFilePath);
        ObjFile << "# Generated by GoldSrc Renderer\n";
        ObjFile << "# https://gitee.com/allocblock/goldsrc-renderer \n";
        ObjFile << "usemtl " << MtlFileName << "\n";
        for (ptr<SObjObject> pObject : m_ObjectSet)
        {
            size_t VertexNum = pObject->pVertexArray->size();
            _ASSERTE(pObject->pImage);
            _ASSERTE(VertexNum % 3 == 0);
            _ASSERTE(VertexNum == pObject->pTexCoordArray->size());
            if (ImageSet.count(pObject->pImage) == 0)
            {
                ImageSet.insert(pObject->pImage);
            }

            ObjFile << "g " << pObject->Name << "\n";
            ObjFile << "usemtl " << pObject->pImage->getName() << "\n";

            for (size_t i = 0; i < VertexNum; ++i)
            {
                const auto& Vertex = pObject->pVertexArray->get(i);
                ObjFile << "v " << Vertex.x << " " << Vertex.y << " " << Vertex.z << "\n";
            }

            for (size_t i = 0; i < VertexNum; ++i)
            {
                const auto& TexCoord = pObject->pTexCoordArray->get(i);
                ObjFile << "vt " << TexCoord.x << " " << TexCoord.y << "\n";
            }

            for (size_t i = 0; i < VertexNum; i += 3)
            {
                ObjFile << "f " << CurId << "/" << CurId << " "
                    << (CurId + 1) << "/" << (CurId + 1) << " "
                    << (CurId + 2) << "/" << (CurId + 2) << "\n";
                CurId += 3;
            }
            ObjFile << "\n";
        }
        ObjFile.close();

        std::ofstream MtlFile(vFilePath.replace_extension(".mtl"));
        for (ptr<CIOImage> pImage : ImageSet)
        {
            MtlFile << "newmtl " << pImage->getName() << "\n";
            MtlFile << "Ka 0 0 0\n";
            MtlFile << "Kd 1 1 1\n";
            MtlFile << "d 1\n";
            MtlFile << "Ns 0\n";
            MtlFile << "illum 1\n";
            MtlFile << "map_Kd textures/" << pImage->getName() << ".bmp\n\n";
        }
        MtlFile.close();

        // save textures
        auto TextureDir = vFilePath.parent_path().append("textures");
        if (!std::filesystem::exists(TextureDir))
            std::filesystem::create_directory(TextureDir);

        for (ptr<CIOImage> pImage : ImageSet)
        {
            pImage->writeBMP(std::filesystem::path(TextureDir).append(pImage->getName() + ".bmp"));
        }
    }

private:
    std::vector<ptr<SObjObject>> m_ObjectSet;
};

